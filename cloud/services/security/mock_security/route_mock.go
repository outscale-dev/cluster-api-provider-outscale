// Code generated by MockGen. DO NOT EDIT.
// Source: ./route.go

// Package mock_security is a generated GoMock package.
package mock_security

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	osc "github.com/outscale/osc-sdk-go/v2"
)

// MockOscRouteInterface is a mock of OscRouteInterface interface.
type MockOscRouteInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOscRouteInterfaceMockRecorder
}

// MockOscRouteInterfaceMockRecorder is the mock recorder for MockOscRouteInterface.
type MockOscRouteInterfaceMockRecorder struct {
	mock *MockOscRouteInterface
}

// NewMockOscRouteInterface creates a new mock instance.
func NewMockOscRouteInterface(ctrl *gomock.Controller) *MockOscRouteInterface {
	mock := &MockOscRouteInterface{ctrl: ctrl}
	mock.recorder = &MockOscRouteInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOscRouteInterface) EXPECT() *MockOscRouteInterfaceMockRecorder {
	return m.recorder
}

// CreateRoute mocks base method.
func (m *MockOscRouteInterface) CreateRoute(destinationIpRange, routeTableId, resourceId, resourceType string) (*osc.RouteTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoute", destinationIpRange, routeTableId, resourceId, resourceType)
	ret0, _ := ret[0].(*osc.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoute indicates an expected call of CreateRoute.
func (mr *MockOscRouteInterfaceMockRecorder) CreateRoute(destinationIpRange, routeTableId, resourceId, resourceType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoute", reflect.TypeOf((*MockOscRouteInterface)(nil).CreateRoute), destinationIpRange, routeTableId, resourceId, resourceType)
}

// CreateRouteTable mocks base method.
func (m *MockOscRouteInterface) CreateRouteTable(netId, routeTableName string) (*osc.RouteTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRouteTable", netId, routeTableName)
	ret0, _ := ret[0].(*osc.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRouteTable indicates an expected call of CreateRouteTable.
func (mr *MockOscRouteInterfaceMockRecorder) CreateRouteTable(netId, routeTableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouteTable", reflect.TypeOf((*MockOscRouteInterface)(nil).CreateRouteTable), netId, routeTableName)
}

// DeleteRoute mocks base method.
func (m *MockOscRouteInterface) DeleteRoute(destinationIpRange, routeTableId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoute", destinationIpRange, routeTableId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoute indicates an expected call of DeleteRoute.
func (mr *MockOscRouteInterfaceMockRecorder) DeleteRoute(destinationIpRange, routeTableId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoute", reflect.TypeOf((*MockOscRouteInterface)(nil).DeleteRoute), destinationIpRange, routeTableId)
}

// DeleteRouteTable mocks base method.
func (m *MockOscRouteInterface) DeleteRouteTable(routeTableId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteTable", routeTableId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouteTable indicates an expected call of DeleteRouteTable.
func (mr *MockOscRouteInterfaceMockRecorder) DeleteRouteTable(routeTableId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteTable", reflect.TypeOf((*MockOscRouteInterface)(nil).DeleteRouteTable), routeTableId)
}

// GetRouteTable mocks base method.
func (m *MockOscRouteInterface) GetRouteTable(routeTableId []string) (*osc.RouteTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteTable", routeTableId)
	ret0, _ := ret[0].(*osc.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteTable indicates an expected call of GetRouteTable.
func (mr *MockOscRouteInterfaceMockRecorder) GetRouteTable(routeTableId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteTable", reflect.TypeOf((*MockOscRouteInterface)(nil).GetRouteTable), routeTableId)
}

// GetRouteTableFromRoute mocks base method.
func (m *MockOscRouteInterface) GetRouteTableFromRoute(routeTableId, resourceId, resourceType string) (*osc.RouteTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteTableFromRoute", routeTableId, resourceId, resourceType)
	ret0, _ := ret[0].(*osc.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteTableFromRoute indicates an expected call of GetRouteTableFromRoute.
func (mr *MockOscRouteInterfaceMockRecorder) GetRouteTableFromRoute(routeTableId, resourceId, resourceType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteTableFromRoute", reflect.TypeOf((*MockOscRouteInterface)(nil).GetRouteTableFromRoute), routeTableId, resourceId, resourceType)
}

// GetRouteTableIdsFromNetIds mocks base method.
func (m *MockOscRouteInterface) GetRouteTableIdsFromNetIds(netId string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteTableIdsFromNetIds", netId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteTableIdsFromNetIds indicates an expected call of GetRouteTableIdsFromNetIds.
func (mr *MockOscRouteInterfaceMockRecorder) GetRouteTableIdsFromNetIds(netId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteTableIdsFromNetIds", reflect.TypeOf((*MockOscRouteInterface)(nil).GetRouteTableIdsFromNetIds), netId)
}

// LinkRouteTable mocks base method.
func (m *MockOscRouteInterface) LinkRouteTable(routeTableId, subnetId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkRouteTable", routeTableId, subnetId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LinkRouteTable indicates an expected call of LinkRouteTable.
func (mr *MockOscRouteInterfaceMockRecorder) LinkRouteTable(routeTableId, subnetId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkRouteTable", reflect.TypeOf((*MockOscRouteInterface)(nil).LinkRouteTable), routeTableId, subnetId)
}

// UnlinkRouteTable mocks base method.
func (m *MockOscRouteInterface) UnlinkRouteTable(linkRouteTableId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlinkRouteTable", linkRouteTableId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlinkRouteTable indicates an expected call of UnlinkRouteTable.
func (mr *MockOscRouteInterfaceMockRecorder) UnlinkRouteTable(linkRouteTableId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlinkRouteTable", reflect.TypeOf((*MockOscRouteInterface)(nil).UnlinkRouteTable), linkRouteTableId)
}
